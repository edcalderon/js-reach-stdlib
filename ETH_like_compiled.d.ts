import ethers from 'ethers';
import * as shared from './shared';
import type { CBR_Address } from './CBR';
import type { ETH_Ty, AnyETH_Ty, TypeDefs, BackendStdlib, EthLikeCompiledArgs } from './ETH_like_interfaces';
export type { ETH_Ty, AnyETH_Ty, };
export declare type Token = CBR_Address;
export declare type PayAmt = shared.MkPayAmt<Token>;
export declare function makeEthLikeCompiled(ethLikeCompiledArgs: EthLikeCompiledArgs): {
    typeDefs: TypeDefs;
    stdlib: BackendStdlib;
    UInt_max: ethers.ethers.BigNumber;
    addressEq: (addr1: unknown, addr2: unknown) => boolean;
    tokenEq: (x: unknown, y: unknown) => boolean;
    digest: (t: AnyETH_Ty, a: unknown) => string;
    bigNumberify: any;
    bigNumberToNumber: any;
    getViewsHelper: any;
    deferContract: any;
    truthyEnv: any;
    envDefault: any;
    setDEBUG: any;
    getDEBUG: any;
    debug: any;
    assert: any;
    isBigNumber: any;
    checkedBigNumberify: any;
    protect: any;
    isHex: any;
    hexToString: any;
    stringToHex: any;
    makeDigest: any;
    hexToBigNumber: any;
    uintToBytes: any;
    bigNumberToHex: any;
    bytesEq: any;
    digestEq: any;
    makeRandom: any;
    eq: any;
    makeArith: any;
    ge: any;
    gt: any;
    le: any;
    lt: any;
    argsSlice: any;
    argsSplit: any;
    Array_set: any;
    Array_zip: any;
    mapRef: any;
    objectMap: any;
    mkAddressEq: any;
    parseFixedPoint: any;
    parseInt: any;
    add: (x: shared.num, y: shared.num) => ethers.ethers.BigNumber;
    sub: (x: shared.num, y: shared.num) => ethers.ethers.BigNumber;
    mod: (x: shared.num, y: shared.num) => ethers.ethers.BigNumber;
    mul: (x: shared.num, y: shared.num) => ethers.ethers.BigNumber;
    div: (x: shared.num, y: shared.num) => ethers.ethers.BigNumber;
    T_Null: any;
    T_Bool: any;
    T_UInt: any;
    T_Bytes: any;
    T_Address: any;
    T_Digest: any;
    T_Token: any;
    T_Object: any;
    T_Data: any;
    T_Array: any;
    T_Tuple: any;
    T_Struct: any;
};
//# sourceMappingURL=ETH_like_compiled.d.ts.map